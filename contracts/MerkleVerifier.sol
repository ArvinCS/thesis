// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// This contract uses the MerkleProof library that includes the multiProofVerify function.
// This is compatible with OpenZeppelin Contracts v4.x and some versions of v5.x.
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title MerkleVerifier
 * @author Your Name
 * @notice This contract acts as an on-chain anchor for an off-chain document registry.
 * It stores a single Merkle root representing the state of all documents.
 * It allows for the efficient batch verification of multiple documents in a single transaction
 * using a multiproof compatible with OpenZeppelin's v4.x standard.
 */
contract MerkleVerifier is Ownable {
    // The single, authoritative Merkle root representing the current state of the entire document registry.
    bytes32 public merkleRoot;

    // Event to be emitted whenever the Merkle root is updated.
    event RootUpdated(bytes32 indexed newRoot, uint256 timestamp);

    /**
     * @notice Constructor to set the initial owner of the contract.
     * @param initialOwner The address of the account that will have administrative privileges.
     */
    constructor(address initialOwner) {
        _transferOwnership(initialOwner);
    }

    /**
     * @notice Updates the Merkle root. Can only be called by the contract owner.
     * @param _newRoot The new Merkle root to be stored.
     */
    function updateRoot(bytes32 _newRoot) external onlyOwner {
        require(_newRoot != bytes32(0), "New root cannot be empty");
        merkleRoot = _newRoot;
        emit RootUpdated(_newRoot, block.timestamp);
    }

    /**
     * @notice Verifies a batch of documents (leaves) against the stored Merkle root using a multiproof.
     * @dev This function is compatible with proofs generated by an off-chain script that
     * precisely matches the logic of OpenZeppelin v4.x's `multiProofVerify`.
     * @param proof A single, combined Merkle proof for all the leaves.
     * @param proofFlags An array of booleans indicating how to process the proof array.
     * @param leaves An array of document hashes (the leaves) to be verified, in reverse order.
     * @return bool True if all leaves are part of the Merkle tree, false otherwise.
     */
    function verifyBatch(
        bytes32[] calldata proof,
        bool[] calldata proofFlags,
        bytes32[] calldata leaves
    ) public view returns (bool) {
        // Delegate the complex verification logic to the battle-tested OpenZeppelin library.
        return MerkleProof.multiProofVerify(proof, proofFlags, merkleRoot, leaves);
    }
}

